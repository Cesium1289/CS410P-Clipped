//NAME:Carson Hansen
//DATE: 4/2/2022
//PURPOSE: Create two sine waves and convert them into .wav files. This
//program will also play the same sound that is generated by 'clipped.wav'.
#include<iostream>
#include<math.h>
#include<fstream>
#include<SFML/Graphics.hpp>
#include<SFML/Audio.hpp>

using namespace std;
int SineWave(double time);
int ClippedWave(double time);

const int SAMPLE_RATE = 48000;
const float FREQUENCY = 440.0f;
const float AMPLITUDE = 0.25f;
int main()
{
	sf::RenderWindow window(sf::VideoMode(800, 600), "Window");
	sf::SoundBuffer sineBuffer;
	sf::SoundBuffer clippedBuffer;
	vector<sf::Int16> clippedWave;
	vector<sf::Int16> sineWave;
	sf::Sound sound;

	//generate the sine and clipped wave data
	for (int i = 0; i < SAMPLE_RATE; i++)
		clippedWave.push_back(ClippedWave(i));
	for (int i = 0; i < SAMPLE_RATE; i++)
		sineWave.push_back(SineWave(i));
	
	//put clipped and sine wave data into their buffers
	sineBuffer.loadFromSamples(&sineWave[0], sineWave.size(), 1, SAMPLE_RATE);
	clippedBuffer.loadFromSamples(&clippedWave[0], clippedWave.size(), 1, SAMPLE_RATE);

	//save content of each buffer to a file
	sineBuffer.saveToFile("sine.wav");
	clippedBuffer.saveToFile("clipped.wav");
	
	//play the clipped wave audio
	sound.setBuffer(clippedBuffer);
	sound.play();
	
	while (window.isOpen()) 
	{
		sf::Event event;

		while (window.pollEvent(event)) 
		{
			if (event.type == sf::Event::Closed) 
				window.close();
		}
	}
}

int SineWave(double time) 
{
	return (AMPLITUDE * 0x7fff) * sin(2 * 3.14 * FREQUENCY * (time / SAMPLE_RATE));
}

int ClippedWave(double time) 
{
	int result =  0x4000 * sin(2 * 3.14 * FREQUENCY * (time / SAMPLE_RATE));
	if (result > 8192)
		return 8192;
	if (result < -8192)
		return -8192;
	return result;
}

